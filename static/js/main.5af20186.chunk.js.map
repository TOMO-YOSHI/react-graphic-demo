{"version":3,"sources":["components/BarCarts/BarCarts.component.jsx","components/PieCharts/PieCharts.component.jsx","components/WorldMap/WorldMap.component.jsx","App.js","serviceWorker.js","index.js"],"names":["data","name","kg","RenderBarChart","Fragment","width","height","dataKey","stroke","strokeDasharray","fill","barSize","data01","value","PieCharts","renderLabel","entry","cx","cy","outerRadius","label","this","PureComponent","jsfiddleUrl","WorldMapComponent","className","color","title","value-suffix","size","country","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSASMA,EAAO,CACX,CACEC,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,KAEN,CACED,KAAM,KACNC,GAAI,MAiBOC,EAbQ,kBACrB,kBAAC,IAAMC,SAAP,KACE,kGACA,kBAAC,IAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKN,KAAMA,GACvC,kBAAC,IAAD,CAAOO,QAAQ,OAAOC,OAAO,YAC7B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeA,OAAO,OAAOC,gBAAgB,QAC7C,kBAAC,IAAD,CAAKF,QAAQ,KAAKG,KAAK,UAAUC,QAAS,Q,oCC/C1CC,G,OAAS,CACb,CACEX,KAAM,QACNY,MAAO,IACPH,KAAM,WAER,CACET,KAAM,oBACNY,MAAO,IACPH,KAAM,WAER,CACET,KAAM,SACNY,MAAO,GACPH,KAAM,WAER,CACET,KAAM,kBACNY,MAAO,GACPH,KAAM,WAER,CACET,KAAM,oDACNY,MAAO,GACPH,KAAM,WAER,CACET,KAAM,WACNY,MAAO,GACPH,KAAM,WAER,CACET,KAAM,QACNY,MAAO,GACPH,KAAM,WAER,CACET,KAAM,uBACNY,MAAO,GACPH,KAAM,aAkBWI,E,4MAGnBC,YAAc,SAASC,GACnB,OAAOA,EAAMH,MAAQ,MAAQG,EAAMf,M,uDAQrC,OACE,kBAAC,IAAMG,SAAP,KACE,uFACA,kBAAC,IAAD,CAAUC,MAAO,IAAKC,OAAQ,KAC5B,kBAAC,IAAD,CACEN,KAAMY,EACNL,QAAQ,QACRU,GAAI,IACJC,GAAI,IACJC,YAAa,GACbT,KAAK,UAGLU,MAAOC,KAAKN,oB,GAzBeO,iBAAlBR,EACZS,YAAc,6C,aCURC,EArEW,WAwDxB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACEC,MAAM,MACNC,MAAM,2BACNC,eAAa,SACbC,KAAK,KACL7B,KA9DO,CACX,CACE8B,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,KAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,MAET,CACEiB,QAAS,KACTjB,MAAO,WCvBEkB,MAdf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,6BACA,kBAAC,EAAD,MACA,6BACA,6BACA,kBAAC,EAAD,QCJcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5af20186.chunk.js","sourcesContent":["import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid } from 'recharts';\n\n// const data = [\n//     {name: 'Page A', uv: 400, pv: 2400, amt: 2400},\n//     {name: 'Page A', uv: 400},\n//     {name: 'Page A', uv: 400}\n// ];\n\nconst data = [\n  {\n    name: 2002,\n    kg: 499,\n  },\n  {\n    name: 2004,\n    kg: 509,\n  },\n  {\n    name: 2006,\n    kg: 512,\n  },\n  {\n    name: 2008,\n    kg: 498,\n  },\n  {\n    name: 2010,\n    kg: 456,\n  },\n  {\n    name: 2012,\n    kg: 432,\n  },\n  {\n    name: 2014,\n    kg: 421,\n  },\n  {\n    name: 2016,\n    kg: 406,\n  },\n];\n\nconst RenderBarChart = () => (\n  <React.Fragment>\n    <h3>Waste disposed from non-residential sources (kilograms per person)</h3>\n    <BarChart width={600} height={300} data={data}>\n      <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n      <Bar dataKey=\"kg\" fill=\"#8884d8\" barSize={30} />\n    </BarChart>\n  </React.Fragment>\n);\n\nexport default RenderBarChart;","import React, { PureComponent } from \"react\";\nimport { PieChart, Pie, Sector, Cell } from \"recharts\";\n\nimport './PieCharts.styles.scss'\n\nconst data01 = [\n  {\n    name: \"Paper\",\n    value: 3.6,\n    fill: \"#800080\",\n  },\n  {\n    name: \"Organic materials\",\n    value: 2.6,\n    fill: \"#FF00FF\",\n  },\n  {\n    name: \"Metals\",\n    value: 0.7,\n    fill: \"#000080\",\n  },\n  {\n    name: \"Other materials\",\n    value: 0.7,\n    fill: \"#0000FF\",\n  },\n  {\n    name: \"Construction, renovation and demolition materials\",\n    value: 0.6,\n    fill: \"#008080\",\n  },\n  {\n    name: \"Plastics\",\n    value: 0.4,\n    fill: \"#808000\",\n  },\n  {\n    name: \"Glass\",\n    value: 0.4,\n    fill: \"#008000\",\n  },\n  {\n    name: \"Household appliances\",\n    value: 0.3,\n    fill: \"#800000\",\n  },\n];\n\n// const data02 = [\n//   { name: \"A1\", value: 100 },\n//   { name: \"A2\", value: 300 },\n//   { name: \"B1\", value: 100 },\n//   { name: \"B2\", value: 80 },\n//   { name: \"B3\", value: 40 },\n//   { name: \"B4\", value: 30 },\n//   { name: \"B5\", value: 50 },\n//   { name: \"C1\", value: 100 },\n//   { name: \"C2\", value: 200 },\n//   { name: \"D1\", value: 150 },\n//   { name: \"D2\", value: 50 },\n// ];\n\nexport default class PieCharts extends PureComponent {\n  static jsfiddleUrl = \"https://jsfiddle.net/alidingling/w6wsrc52/\";\n\n  renderLabel = function(entry) {\n      return entry.value + \" / \" + entry.name;\n  }\n\n  // colors = function(entry) {\n  //   return entry.color;\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h3>Solid waste diversion by type of material, Canada, 2016</h3>\n        <PieChart width={500} height={300}>\n          <Pie\n            data={data01}\n            dataKey=\"value\"\n            cx={200}\n            cy={150}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            // fill={this.color}\n            // label\n            label={this.renderLabel}\n          />\n        </PieChart>\n      </React.Fragment>\n    );\n  }\n}\n\n        // <Pie\n        //   data={data02}\n        //   dataKey=\"value\"\n        //   cx={200}\n        //   cy={200}\n        //   innerRadius={70}\n        //   outerRadius={90}\n        //   fill=\"#82ca9d\"\n        //   label\n        // />;\n\n","import React from \"react\";\n// import \"./App.css\";\nimport { WorldMap } from \"react-svg-worldmap\";\n\nconst WorldMapComponent = () => {\n  const data = [\n    {\n      country: \"be\",\n      value: 2.99,\n    },\n    {\n      country: \"ca\",\n      value: 1.81,\n    },\n    {\n      country: \"fr\",\n      value: 3.52,\n    },\n    {\n      country: \"de\",\n      value: 8.22,\n    },\n    {\n      country: \"hk\",\n      value: 26.1,\n    },\n    {\n      country: \"jp\",\n      value: 10.3,\n    },\n    {\n      country: \"mx\",\n      value: 4.9,\n    },\n    {\n      country: \"nl\",\n      value: 3.59,\n    },\n    {\n      country: \"gb\",\n      value: 4.31,\n    },\n    {\n      country: \"us\",\n      value: 12.4,\n    },\n  ];\n//   const data = [\n//     { country: \"cn\", value: 1389618778 }, // china\n//     { country: \"in\", value: 1311559204 }, // india\n//     { country: \"us\", value: 331883986 }, // united states\n//     { country: \"id\", value: 264935824 }, // indonesia\n//     { country: \"pk\", value: 210797836 }, // pakistan\n//     { country: \"br\", value: 210301591 }, // brazil\n//     { country: \"ng\", value: 208679114 }, // nigeria\n//     { country: \"bd\", value: 161062905 }, // bangladesh\n//     { country: \"ru\", value: 141944641 }, // russia\n//     { country: \"mx\", value: 127318112 }, // mexico\n//   ];\n\n  return (\n    <div className=\"App\">\n      <WorldMap\n        color=\"red\"\n        title=\"Top 10 Plastic Exporters\"\n        value-suffix=\"people\"\n        size=\"lg\"\n        data={data}\n      />\n    </div>\n  );\n}\n\nexport default WorldMapComponent;\n","import React from 'react';\nimport './App.css';\n\nimport RenderBarChart from './components/BarCarts/BarCarts.component';\nimport PieCharts from './components/PieCharts/PieCharts.component';\nimport WorldMapComponent from './components/WorldMap/WorldMap.component.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RenderBarChart />\n      <hr />\n      <hr />\n      <PieCharts />\n      <hr />\n      <hr />\n      <WorldMapComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}